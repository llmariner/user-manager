syntax = "proto3";

package llmariner.users.server.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/llmariner/user-manager/api/v1";

message APIKey {
  string id = 1;
  string object = 2;
  string name = 3;
  // secret is populated only when a new API key is created.
  string secret = 4;
  int64 created_at = 5;
  User user = 6;
  Organization organization = 7;
  Project project = 8;

  OrganizationRole organization_role = 9;
  ProjectRole project_role = 10;
}

message User {
  string id = 1;
  // internal_id is populated only for internal gRPC service.
  string internal_id = 2;
}

enum OrganizationRole {
  ORGANIZATION_ROLE_UNSPECIFIED = 0;
  ORGANIZATION_ROLE_OWNER = 1;
  ORGANIZATION_ROLE_READER = 2;
}

enum ProjectRole {
  PROJECT_ROLE_UNSPECIFIED = 0;
  PROJECT_ROLE_OWNER = 1;
  PROJECT_ROLE_MEMBER = 2;
}

message OrganizationUser {
  string user_id = 1;
  // internal_user_id is populated only for internal gRPC service.
  string internal_user_id = 4;

  string organization_id = 2;
  OrganizationRole role = 3;

  // Next ID: 5
}

message Organization {
  string id = 1;
  string title = 2;
  int64 created_at = 3;
}

message ProjectUser {
  string user_id = 1;
  string project_id = 2;
  string organization_id = 3;
  ProjectRole role = 4;
}

message Project {
  string id = 1;
  string title = 2;
  // kubernetes_namespace is the namespace where the fine-tuning jobs for the project run.
  string kubernetes_namespace = 3;
  string organization_id = 4;
  int64 created_at = 5;
}

message CreateAPIKeyRequest {
  string name = 1;
  string project_id = 2;
  string organization_id = 3;
}

message ListAPIKeysRequest {
  string project_id = 1;
  string organization_id = 2;
}

message ListAPIKeysResponse {
  string object = 1;
  repeated APIKey data = 2;
}

message DeleteAPIKeyRequest {
  string id = 1;
  string project_id = 2;
  string organization_id = 3;
}

message DeleteAPIKeyResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateOrganizationRequest {
  string title = 1;
}

message ListOrganizationsRequest {
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateOrganizationUserRequest {
  string organization_id = 1;
  string user_id = 2;
  OrganizationRole role = 3;
}

message ListOrganizationUsersRequest {
  // organization_id must be set for UsersService. It is no-op for UsersInternalService.
  string organization_id = 1;
}

message ListOrganizationUsersResponse {
  repeated OrganizationUser users = 1;
}

message DeleteOrganizationUserRequest {
  string organization_id = 1;
  string user_id = 2;
}

message DeleteOrganizationUserResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateProjectRequest {
  string title = 1;
  string organization_id = 2;
  string kubernetes_namespace = 3;
}

message ListProjectsRequest {
    string organization_id = 1;
}

message ListProjectsResponse {
  repeated Project projects = 1;
}

message DeleteProjectRequest {
  string organization_id = 1;
  string id = 2;
}

message DeleteProjectResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateProjectUserRequest {
  string organization_id = 1;
  string project_id = 2;
  string user_id = 3;
  ProjectRole role = 4;
}

message ListProjectUsersRequest {
  // organization_id and project_id must be set for UsersService. It is no-op for UsersInternalService.
  string organization_id = 1;
  string project_id = 2;
}

message ListProjectUsersResponse {
  repeated ProjectUser users = 1;
}

message DeleteProjectUserRequest {
  string organization_id = 1;
  string project_id = 2;
  string user_id = 3;
}

message DeleteProjectUserResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

service UsersService {
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/projects/{project_id}/api_keys"
      body: "*"
    };
  }

  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/projects/{project_id}/api_keys"
    };
  }

  rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (DeleteAPIKeyResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/projects/{project_id}/api_keys/{id}"
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "*"
    };
  }
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  }
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{id}"
    };
  }

  rpc CreateOrganizationUser(CreateOrganizationUserRequest) returns (OrganizationUser) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/users"
      body: "*"
    };
  }
  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/users"
    };
  }
  rpc DeleteOrganizationUser(DeleteOrganizationUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/users/{user_id}"
    };
  }

  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/projects"
      body: "*"
    };
  }
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/projects"
    };
  }
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/projects/{id}"
    };
  }

  rpc CreateProjectUser(CreateProjectUserRequest) returns (ProjectUser) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/projects/{project_id}/users"
      body: "*"
    };
  }
  rpc ListProjectUsers(ListProjectUsersRequest) returns (ListProjectUsersResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/projects/{project_id}/users"
    };
  }
  rpc DeleteProjectUser(DeleteProjectUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/projects/{project_id}/users/{user_id}"
    };
  }

}

message InternalAPIKey {
  APIKey api_key = 1;
  string tenant_id = 2;
}

message ListInternalAPIKeysRequest {
}

message ListInternalAPIKeysResponse {
  repeated InternalAPIKey api_keys = 1;
}

message InternalOrganization {
  Organization organization = 1;
  string tenant_id = 2;
}

message ListInternalOrganizationsRequest {
}

message ListInternalOrganizationsResponse {
  repeated InternalOrganization organizations = 1;
}

message CreateUserInternalRequest {
  string tenant_id = 1;
  // title is used for both orgnization and project.
  string title = 2;
  string user_id = 3;
  string kubernetes_namespac= 4;
}

service UsersInternalService {
  rpc ListInternalAPIKeys(ListInternalAPIKeysRequest) returns (ListInternalAPIKeysResponse) {
  }
  rpc ListInternalOrganizations(ListInternalOrganizationsRequest) returns (ListInternalOrganizationsResponse) {
  }
  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
  }
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
  }
  rpc ListProjectUsers(ListProjectUsersRequest) returns (ListProjectUsersResponse) {
  }
  rpc CreateUserInternal(CreateUserInternalRequest) returns (google.protobuf.Empty) {
  }
}
